//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/DoodleJump3D/Scripts/Service/InputSystem/DoodleInputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DoodleInputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DoodleInputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DoodleInputSystem"",
    ""maps"": [
        {
            ""name"": ""Doodle"",
            ""id"": ""237e39ec-d78d-459e-a216-5bb307dffccf"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a3f1e4ee-38fa-4e66-a58c-f15cac9a928f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""16f62d4e-6da3-4f78-a57f-e9e42461b41e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keybord"",
                    ""id"": ""12ad5e68-9c3e-473e-8bce-89d309213aac"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""47d6f0ca-a313-47e4-a4d8-7524d3e62d9f"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""e82a120f-4282-42cd-aec8-a4c477106979"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""90c01127-3265-47e1-96a9-982db76c3231"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and keybord"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse and keybord"",
            ""bindingGroup"": ""Mouse and keybord"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Doodle
        m_Doodle = asset.FindActionMap("Doodle", throwIfNotFound: true);
        m_Doodle_Move = m_Doodle.FindAction("Move", throwIfNotFound: true);
        m_Doodle_Jump = m_Doodle.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Doodle
    private readonly InputActionMap m_Doodle;
    private List<IDoodleActions> m_DoodleActionsCallbackInterfaces = new List<IDoodleActions>();
    private readonly InputAction m_Doodle_Move;
    private readonly InputAction m_Doodle_Jump;
    public struct DoodleActions
    {
        private @DoodleInputSystem m_Wrapper;
        public DoodleActions(@DoodleInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Doodle_Move;
        public InputAction @Jump => m_Wrapper.m_Doodle_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Doodle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DoodleActions set) { return set.Get(); }
        public void AddCallbacks(IDoodleActions instance)
        {
            if (instance == null || m_Wrapper.m_DoodleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DoodleActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IDoodleActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IDoodleActions instance)
        {
            if (m_Wrapper.m_DoodleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDoodleActions instance)
        {
            foreach (var item in m_Wrapper.m_DoodleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DoodleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DoodleActions @Doodle => new DoodleActions(this);
    private int m_MouseandkeybordSchemeIndex = -1;
    public InputControlScheme MouseandkeybordScheme
    {
        get
        {
            if (m_MouseandkeybordSchemeIndex == -1) m_MouseandkeybordSchemeIndex = asset.FindControlSchemeIndex("Mouse and keybord");
            return asset.controlSchemes[m_MouseandkeybordSchemeIndex];
        }
    }
    public interface IDoodleActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
